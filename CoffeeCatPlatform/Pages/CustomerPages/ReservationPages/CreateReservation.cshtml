@page "/CreateReservation"
@model CoffeeCatPlatform.Pages.CustomerPages.ReservationPages.CreateReservationModel

@{
    ViewData["Title"] = "CreateReservation";
}

<h1>CreateReservation</h1>

<h4>Reservation</h4>
<hr />
<div class="row">
    @if (Model.TempData["OnGoingReservation"] != null)
    {
        <h3>You cannot create a new reservation if there is an on-going reservation</h3>
        <h4>Ongoing reservation's details:</h4>

        @foreach (var reservation in (IEnumerable<Models.Reservation>)Model.TempData["OnGoingReservation"])
        {
            <p>
                <strong>Reservation ID: </strong> @reservation.ReservationId <br />
                <strong>Reservation Arrival Date: </strong> @reservation.ArrivalDate <br />
                <strong>Reservation Start Time: </strong> @reservation.StartTime <br />
                <strong>Reservation End Time: </strong> @reservation.EndTime <br />
            </p>
        }
    }
    else
    {
        <div class="col-md-4">
            <form method="post" id="reservationForm">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="form-group">
                    <label asp-for="Reservation.ArrivalDate" class="control-label">Arrival Day</label>
                    <input asp-for="Reservation.ArrivalDate" class="form-control" type="date" id="arrivalDate"
                           min="@DateTime.Today.ToString("yyyy-MM-dd")" />
                    <span asp-validation-for="Reservation.ArrivalDate" class="text-danger"></span>
                </div>

                @if (ModelState["Invalid_ArrivalDate"] != null)
                {
                    <span>@ModelState["Invalid_ArrivalDate"].Errors.First().ErrorMessage</span>
                }

                <div class="form-group">
                    <label asp-for="Reservation.StartTime" class="control-label">Start Time</label>
                    <input asp-for="Reservation.StartTime" class="form-control" type="time" id="startTime" min="07:00"
                           max="21:00" />
                    <span asp-validation-for="Reservation.StartTime" class="text-danger"></span>
                </div>

                @if (ModelState["Invalid_StartTime"] != null)
                {
                    <span>@ModelState["Invalid_StartTime"].Errors.First().ErrorMessage</span>
                }

                @if (ModelState["MinimumStartTimeError"] != null)
                {
                    <span>@ModelState["MinimumStartTimeError"].Errors.First().ErrorMessage</span>
                }

                @if (ModelState["WorkingHoursError"] != null)
                {
                    <span>@ModelState["WorkingHoursError"].Errors.First().ErrorMessage</span>
                }

                <div class="form-group">
                    <label asp-for="Reservation.EndTime" class="control-label">End Time</label>
                    <input asp-for="Reservation.EndTime" class="form-control" type="time" id="endTime" min="07:00"
                           max="21:00" />
                    <span asp-validation-for="Reservation.EndTime" class="text-danger"></span>
                </div>

                @if (ModelState["Invalid_EndTime"] != null)
                {
                    <span>@ModelState["Invalid_EndTime"].Errors.First().ErrorMessage</span>
                }

                <div class="form-group">
                    <div class="col-md-6">
                        <label asp-for="Reservation.SeatsBooked" class="control-label">Number of Seats</label>
                        <input asp-for="Reservation.SeatsBooked" class="form-control" type="number" id="seatsBooked"
                               min="1" />
                        <span asp-validation-for="Reservation.SeatsBooked" class="text-danger"></span>
                    </div>
                    <div class="col-md-6">
                        <input type="button" id="tableSelectButton" value="Select Table" class="btn btn-primary" />
                    </div>
                </div>
                <div class="form-group">
                    <ul id="tableIdList">
                    </ul>
                </div>
                <div class="form-group">
                    <label asp-for="Reservation.TotalPrice" class="control-label">Total Price</label>
                    <input asp-for="Reservation.TotalPrice" class="form-control" readonly />
                    <span asp-validation-for="Reservation.TotalPrice" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <input type="submit" class="btn btn-primary" id="formSubmitButton" value="Create" />
                </div>
            </form>
        </div>

        <div class="col-md-4">
            <p>
                Price is calculated based on the staying time and seats booked.
            </p>
            <p>
                The first 2 hours are free, each hour thereafter cost 50000 VND
            </p>
            <p>
                The first 4 seats are free, each seat thereafter cost 20000 VND
            </p>
            <p>
                Payment will be done through Momo
            </p>
            <p>
                The reservation will be cancelled if not paid for within 2 hours
            </p>
        </div>

        <div class="modal fade" id="tableSelectModal" role="dialog">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">Table Selector</h4>
                    </div>
                    <div class="modal-body" id="modalContent">
                    </div>
                    <div class="modal-footer">
                        <div class="modal-alert-message"></div>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary" id="modalConfirmButton">Confirm</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<div>
    <a asp-page="/Homepage">Back to Homepage</a>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var startTimeInput = document.getElementById('startTime');
            var endTimeInput = document.getElementById('endTime');
            var totalPriceInput = document.getElementById('Reservation_TotalPrice');

            var seatCountInput = document.getElementById('seatsBooked');
            var tableSelectButton = document.getElementById('tableSelectButton');
            var modalConfirmButton = document.getElementById('modalConfirmButton');

            var arrivalDateInput = document.getElementById('arrivalDate');
            var startTimeInput = document.getElementById('startTime');
            var endTimeInput = document.getElementById('endTime');

            startTimeInput.addEventListener('change', updateTotalPrice);
            endTimeInput.addEventListener('change', updateTotalPrice);

            //Update total price when time change
            function updateTotalPrice() {
                var startTime = new Date('1970-01-01T' + startTimeInput.value);
                var endTime = new Date('1970-01-01T' + endTimeInput.value);

                if (endTime <= startTime) {
                    alert("End time must be after start time.");
                    return;
                }

                var stayingTime = (endTime - startTime) / (1000 * 60 * 60);
                var totalPrice = stayingTime <= 2 ? 0 : Math.ceil((stayingTime - 2)) * 50000;

                totalPriceInput.value = totalPrice.toFixed(2);
            }

            //Check if there are tables selected before submitting
            document.getElementById('formSubmitButton').addEventListener('click', function (event) {
                var startTime = new Date('1970-01-01T' + startTimeInput.value);
                var endTime = new Date('1970-01-01T' + endTimeInput.value);

                var tableIdListElement = document.querySelectorAll('.selectedTableId');

                if (endTime <= startTime) {
                    alert("End time must be after start time.");
                    return;
                }
                else if (tableIdListElement.length > 0) {
                    document.getElementById('reservationForm').submit();
                } else {
                    alert('Unable to get selectedTableIds');
                    event.preventDefault();
                }
            });

            //Clear selected tables after seat count change
            seatCountInput.addEventListener('change', function () {
                var tableIdList = document.getElementById('tableIdList');

                tableIdList.innerHTML = '';

                document.getElementById('Reservation_TotalPrice').value = (0).toFixed(2);
                updateTotalPrice();
            });

            //Show modal and get available tables
            tableSelectButton.addEventListener('click', function () {
                if (seatCountInput.value >= 1 && arrivalDateInput.value && startTimeInput.value && endTimeInput.value) {
                    var requestData = {
                        arrivalDate: arrivalDateInput.value,
                        startTime: startTimeInput.value,
                        endTime: endTimeInput.value
                    };

                    //console.log(requestData);

                    $.ajax({
                        type: "GET",
                        url: "/CreateReservation?handler=GetTable",
                        data: requestData,
                        dataType: "json",
                        success: function (result) {
                            //console.log(result);

                            $('#modalContent').empty();

                            if (result.length > 0) {
                                var totalSeatCount = 0;
                                result.forEach(function (table) {
                                    totalSeatCount += table.SeatCount;
                                });

                                if (seatCountInput.value <= totalSeatCount) {
                                    result.forEach(function (table) {
                                        var tableHtml = '';
                                        tableHtml += '<div>';
                                        tableHtml += '<label>Table no. ' + table.TableId + ', Seats: ' + table.SeatCount + '</label>';
                                        tableHtml += '<input type="checkbox" value=' + table.TableId + '></input>';
                                        tableHtml += '<input type="hidden" name="seatCount" value=' + table.SeatCount + '></input>';
                                        tableHtml += '</div>';
                                        $('#modalContent').append(tableHtml);
                                    });
                                } else {
                                    $('#modalContent').html('<label>There are only ' + totalSeatCount + ' seats available</label>');
                                }
                            } else {
                                $('#modalContent').html('<label>There are no available tables in the time frame</label>');
                            }

                            $('#tableSelectModal').modal('show');
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                }
            });

            //Hide modal and add selected tables to form list
            modalConfirmButton.addEventListener('click', function () {
                var selectedTables = [];
                var selectedSeatCount = [];
                var totalSeatCount = 0;

                setTimeout(function () {
                    $('.modal-alert-message').empty();
                }, 4000);

                $('#tableSelectModal input[type="checkbox"]').each(function () {
                    if ($(this).prop('checked')) {
                        selectedTables.push($(this).val());
                        selectedSeatCount.push($(this).siblings('input[name="seatCount"]').val());
                        var seatCount = parseInt($(this).siblings('input[name="seatCount"]').val());
                        totalSeatCount += seatCount;
                    }
                });

                if (selectedTables.length > 0) {
                    if (totalSeatCount >= seatCountInput.value) {
                        var tableIdList = $('#tableIdList');
                        var hiddenTableIds = document.querySelectorAll('.selectedTableId');

                        tableIdList.empty();

                        hiddenTableIds.forEach(function (input) {
                            input.parentNode.removeChild(input);
                        });

                        updateTotalPrice();

                        if (totalSeatCount > 4) {
                            var totalPriceInput = document.getElementById('Reservation_TotalPrice');
                            var additionalSeatPrice = (totalSeatCount - 4) * 20000;
                            var currentPrice = parseInt(totalPriceInput.value);

                            totalPriceInput.value = (currentPrice + additionalSeatPrice).toFixed(2);
                        }

                        selectedTables.forEach(function (tableId) {
                            var tableIdInput = $('<input>').attr({
                                type: 'hidden',
                                class: 'selectedTableId',
                                name: 'selectedTable',
                                value: tableId
                            }).appendTo('#reservationForm');

                            var listItem = $('<li>').text("Table no. " + tableId);

                            tableIdList.append(listItem);

                            $('#tableSelectModal').modal('hide');
                        });
                    } else {
                        $('.modal-alert-message').html("The selected table(s) can\'t cover all people");
                    }
                }
                else {
                    $('.modal-alert-message').html("You haven\'t chosen any table");
                }
            });
        });
    </script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
